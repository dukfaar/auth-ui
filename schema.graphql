type Client {
  _id: ID! @deprecated
  clientId: String @deprecated
  clientSecret: String @deprecated
  grants: [String] @deprecated
  tokens(last: Int, after: ID, before: ID, first: Int): TokenConnection @deprecated
}

type ClientConnection {
  edges: [ClientEdge] @deprecated
  pageInfo: PageInfo! @deprecated
}

type ClientEdge {
  cursor: String! @deprecated
  node: Client @deprecated
}

input ClientInput {
  clientId: String
  clientSecret: String
  grants: [String]
}

# The `Date` scalar type represents a Date.
scalar Date

type Leve {
  _id: ID @deprecated
  class: String @deprecated
  gil: Int @deprecated
  level: Int @deprecated
  name: String @deprecated
  xivdbid: String @deprecated
  xp: Int @deprecated
}

type LeveConnection {
  edges: [LeveEdge] @deprecated
  pageInfo: PageInfo! @deprecated
  totalCount: Int @deprecated
}

type LeveEdge {
  cursor: ID! @deprecated
  node: Leve @deprecated
}

type Mutation {
  createClient(clientId: String!, clientSecret: String!): Client @deprecated
  createPermission(name: String!): Permission @deprecated
  createRole(name: String!): Role @deprecated
  createUser(password: String!, username: String!, email: String!): User @deprecated
  deleteClient(id: ID!): Client @deprecated
  deletePermissionByName(id: ID!): Permission @deprecated
  deleteRole(id: ID!): Role @deprecated
  deleteUser(id: ID!): User @deprecated
  importLeves: Boolean @deprecated
  registerMutation(name: String!): Permission @deprecated
  registerQuery(name: String!): Permission @deprecated
  registerSubscription(name: String!): Permission @deprecated
  registerTypeForPermissions(name: String!, fields: [String]!): [Permission] @deprecated
  updateClient(id: ID!, input: ClientInput!): Client @deprecated
  updatePermission(input: PermissionInput!, id: ID!): Permission @deprecated
  updateRole(id: ID!, input: RoleInput!): Role @deprecated
  updateUser(id: ID!, input: UserInput!): User @deprecated
  createClass(input: ClassMutationInput): Class!
  updateClass(id: ID!, input: ClassMutationInput): Class!
  deleteClass(id: ID!): ID
}

type PageInfo {
  endCursor: ID @deprecated
  hasNextPage: Boolean @deprecated
  hasPreviousPage: Boolean @deprecated
  startCursor: ID @deprecated
}

type Permission {
  _id: ID! @deprecated
  name: String! @deprecated
}

type PermissionConnection {
  edges: [PermissionEdge] @deprecated
  pageInfo: PageInfo! @deprecated
}

type PermissionEdge {
  cursor: String! @deprecated
  node: Permission @deprecated
}

input PermissionInput {
  name: String
}

type Query {
  clientlogin(clientId: String!, clientSecret: String!): Token @deprecated
  clients(first: Int, last: Int, after: ID, before: ID): ClientConnection @deprecated
  leve(id: ID!): Leve! @deprecated
  leves(before: String, after: String, first: Int, last: Int): LeveConnection! @deprecated
  login(clientSecret: String!, username: String!, password: String!, clientId: String!): Token @deprecated
  me: User @deprecated
  permissions(after: ID, before: ID, first: Int, last: Int): PermissionConnection @deprecated
  refresh(refreshToken: String!, clientId: String!, clientSecret: String!): Token @deprecated
  role(id: ID!): Role @deprecated
  roles(last: Int, after: ID, before: ID, first: Int): RoleConnection @deprecated
  tokens(after: ID, before: ID, first: Int, last: Int): TokenConnection @deprecated
  user(id: ID!): User @deprecated
  userByAccessToken(accessToken: String!): User @deprecated
  users(before: ID, first: Int, last: Int, after: ID): UserConnection @deprecated
  classes(first: Int, last: Int, before: String, after: String): ClassConnection!
  class(id: ID!): Class!
  classByName(name: String!, namespaceId: ID): Class!
  classByNameOrSynonym(name: String!, namespaceId: ID): Class!
}

type Role {
  _id: ID! @deprecated
  name: String! @deprecated
  permissions(first: Int, last: Int, after: ID, before: ID): PermissionConnection @deprecated
}

type RoleConnection {
  edges: [RoleEdge] @deprecated
  pageInfo: PageInfo! @deprecated
}

type RoleEdge {
  cursor: String! @deprecated
  node: Role @deprecated
}

input RoleInput {
  permissions: [String]
  name: String
}

type Subscription {
  clientCreated: Client @deprecated
  clientDeleted: Client @deprecated
  clientUpdated: Client @deprecated
  permissionCreated: Permission @deprecated
  permissionDeleted: Permission @deprecated
  permissionUpdated: Permission @deprecated
  roleCreated: Role @deprecated
  roleDeleted: Role @deprecated
  roleUpdated: Role @deprecated
  userCreated: User @deprecated
  userDeleted: User @deprecated
  userUpdated: User @deprecated
}

type Token {
  _id: ID! @deprecated
  accessToken: String @deprecated
  accessTokenExpiresAt: Date @deprecated
  client: Client @deprecated
  clientId: String @deprecated
  refreshToken: String @deprecated
  refreshTokenExpiresAt: Date @deprecated
  user: User @deprecated
  userId: String @deprecated
}

type TokenConnection {
  edges: [TokenEdge] @deprecated
  pageInfo: PageInfo! @deprecated
}

type TokenEdge {
  cursor: String! @deprecated
  node: Token @deprecated
}

type User {
  _id: ID! @deprecated
  email: String @deprecated
  permissions(first: Int, last: Int, after: ID, before: ID): PermissionConnection @deprecated
  roles(first: Int, last: Int, after: ID, before: ID): RoleConnection @deprecated
  tokens(last: Int, after: ID, before: ID, first: Int): TokenConnection @deprecated
  username: String @deprecated
}

type UserConnection {
  edges: [UserEdge] @deprecated
  pageInfo: PageInfo! @deprecated
}

type UserEdge {
  cursor: String! @deprecated
  node: User @deprecated
}

input UserInput {
  email: String
  password: String
  roles: [String]
}

input ClassMutationInput {
  name: String
  namespaceId: ID
  synonyms: [String]
  maxLevel: Int
}

type Class {
	_id: ID
	name: String
	namespaceId: ID
	synonyms: [String]
	maxLevel: Int
}

type ClassConnection {
  edges: [ClassEdge] @deprecated
  pageInfo: PageInfo! @deprecated
}

type ClassEdge {
  cursor: String! @deprecated
  node: Class @deprecated
}
